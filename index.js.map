{"version":3,"file":"index.js","sources":["source/utils.js","source/MessagePortEvent.js","source/MessagePortDispatcher.js"],"sourcesContent":["/**\r\n * Created by Oleg Galaburda on 09.02.16.\r\n */\r\nimport { isObject } from '@actualwave/event-dispatcher';\r\n\r\nexport const createId = () => `MP/${Math.ceil(Math.random() * 10000)}/${Date.now()}`;\r\n\r\n/**\r\n * If toJSON method implemented on object, it will be called instead of converting to JSON string.\r\n * This was made to utilize structured cloning algorithm for raw objects.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\r\n * In this case developer is responsible for converting linked objects.\r\n * @param object\r\n * @returns {Object}\r\n */\r\nexport const toRawData = (object) => {\r\n  if (typeof object.toJSON === 'function') {\r\n    return object.toJSON();\r\n  }\r\n\r\n  return JSON.stringify(object);\r\n};\r\n\r\n/**\r\n *\r\n * @param data {Object|String}\r\n * @returns {Object}\r\n */\r\nexport const parseRawData = (data) => {\r\n  let object; // keep it undefined in case of error\r\n\r\n  if (isObject(data)) {\r\n    return data;\r\n  }\r\n\r\n  try {\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    // this isn't an event we are waiting for.\r\n  }\r\n\r\n  return object;\r\n};\r\n","/**\r\n * Created by Oleg Galaburda on 09.02.16.\r\n */\r\nimport hasOwn from '@actualwave/has-own';\r\nimport { isObject } from '@actualwave/event-dispatcher';\r\nimport { toRawData, parseRawData } from './utils';\r\n\r\nexport class MessagePortEvent {\r\n  constructor(event, dispatcherId) {\r\n    this.event = event;\r\n    this.dispatcherId = dispatcherId;\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      event: toRawData(this.event),\r\n      dispatcherId: this.dispatcherId,\r\n    };\r\n  }\r\n}\r\n\r\nexport const isMessagePortEvent = (object) =>\r\n  isObject(object) && hasOwn(object, 'dispatcherId') && hasOwn(object, 'event');\r\n\r\nexport const parseMessagePortEvent = (object) => {\r\n  const result = parseRawData(object);\r\n\r\n  if (result && isMessagePortEvent(result)) {\r\n    const { event, dispatcherId } = result;\r\n    return new MessagePortEvent(parseRawData(event), dispatcherId);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default MessagePortEvent;\r\n","/**\r\n * Created by Oleg Galaburda on 09.02.16.\r\n */\r\n/* eslint-disable no-restricted-globals */\r\n\r\nimport { createEventDispatcher, getEvent } from '@actualwave/event-dispatcher';\r\nimport { MessagePortEvent, parseMessagePortEvent } from './MessagePortEvent';\r\nimport { createId, toRawData } from './utils';\r\n\r\nexport class MessagePortDispatcher {\r\n  dispatcherId = createId();\r\n\r\n  targetOrigin = '*';\r\n\r\n  constructor(\r\n    target = null,\r\n    customPostMessageHandler = null,\r\n    receiverEventPreprocessor = null,\r\n    senderEventPreprocessor = null,\r\n  ) {\r\n    this.target = target || self;\r\n    this.customPostMessageHandler = customPostMessageHandler;\r\n    this.senderEventPreprocessor = senderEventPreprocessor;\r\n    this.sender = createEventDispatcher();\r\n    this.receiver = createEventDispatcher(receiverEventPreprocessor);\r\n\r\n    target.addEventListener('message', (event) => this._postMessageListener(event));\r\n  }\r\n\r\n  addEventListener(eventType, listener, priority) {\r\n    this.receiver.addEventListener(eventType, listener, priority);\r\n  }\r\n\r\n  hasEventListener(eventType) {\r\n    return this.receiver.hasEventListener(eventType);\r\n  }\r\n\r\n  removeEventListener(eventType, listener) {\r\n    this.receiver.removeEventListener(eventType, listener);\r\n  }\r\n\r\n  removeAllEventListeners(eventType) {\r\n    this.receiver.removeAllEventListeners(eventType);\r\n  }\r\n\r\n  dispatchEvent(eventType, data, transferList) {\r\n    let event = getEvent(eventType, data);\r\n\r\n    if (this.senderEventPreprocessor) {\r\n      event = this.senderEventPreprocessor.call(this, event);\r\n    }\r\n\r\n    const eventJson = toRawData(new MessagePortEvent(event, this.dispatcherId));\r\n\r\n    return this._postMessageHandler(eventJson, transferList);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _postMessageHandler(data, transferList) {\r\n    const handler = this.customPostMessageHandler;\r\n\r\n    if (handler) {\r\n      return handler.call(this, data, this.targetOrigin, transferList);\r\n    }\r\n\r\n    return this.target.postMessage(data, this.targetOrigin, transferList);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _postMessageListener(event) {\r\n    // INFO .nativeEvent react-native thing, it contains event object coming from WebView\r\n    event = event.nativeEvent || event;\r\n    const message = parseMessagePortEvent(event.data);\r\n\r\n    if (message) {\r\n      if (message.dispatcherId === this.dispatcherId) {\r\n        this.sender.dispatchEvent(message.event);\r\n      } else {\r\n        this.receiver.dispatchEvent(message.event);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const createMessagePortDispatcher = (\r\n  target,\r\n  customPostMessageHandler,\r\n  receiverEventPreprocessor,\r\n  senderEventPreprocessor,\r\n) =>\r\n  new MessagePortDispatcher(\r\n    target,\r\n    customPostMessageHandler,\r\n    receiverEventPreprocessor,\r\n    senderEventPreprocessor,\r\n  );\r\n\r\nexport const factory = (getTarget, dispatcher = null) => () => {\r\n  if (!dispatcher) {\r\n    return createMessagePortDispatcher(getTarget());\r\n  }\r\n  return dispatcher;\r\n};\r\n\r\nexport const createForSelf = factory(() => self);\r\n\r\nexport const createForParent = factory(() => parent);\r\n\r\nexport const createForTop = factory(() => top);\r\n\r\nexport default MessagePortDispatcher;\r\n"],"names":["createId","Math","ceil","random","Date","now","toRawData","object","toJSON","JSON","stringify","parseRawData","data","isObject","parse","error","MessagePortEvent","constructor","event","dispatcherId","isMessagePortEvent","hasOwn","parseMessagePortEvent","result","MessagePortDispatcher","target","customPostMessageHandler","receiverEventPreprocessor","senderEventPreprocessor","targetOrigin","self","sender","createEventDispatcher","receiver","addEventListener","_postMessageListener","eventType","listener","priority","hasEventListener","removeEventListener","removeAllEventListeners","dispatchEvent","transferList","getEvent","call","eventJson","_postMessageHandler","handler","postMessage","nativeEvent","message","createMessagePortDispatcher","factory","getTarget","dispatcher","createForSelf","createForParent","parent","createForTop","top"],"mappings":"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"}