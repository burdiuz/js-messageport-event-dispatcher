{"version":3,"file":"index.js","sources":["source/utils.js","source/MessagePortEvent.js","source/MessagePortDispatcher.js"],"sourcesContent":["/**\n * Created by Oleg Galaburda on 09.02.16.\n */\nimport { isObject } from '@actualwave/event-dispatcher';\n\nexport const createId = () => `MP/${Math.ceil(Math.random() * 10000)}/${Date.now()}`;\n\n/**\n * If toJSON method implemented on object, it will be called instead of converting to JSON string.\n * This was made to utilize structured cloning algorithm for raw objects.\n * https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n * In this case developer is responsible for converting linked objects.\n * @param object\n * @returns {Object}\n */\nexport const toRawData = (object) => {\n  if (typeof object.toJSON === 'function') {\n    return object.toJSON();\n  }\n\n  return JSON.stringify(object);\n};\n\n/**\n *\n * @param data {Object|String}\n * @returns {Object}\n */\nexport const parseRawData = (data) => {\n  let object; // keep it undefined in case of error\n\n  if (isObject(data)) {\n    return data;\n  }\n\n  try {\n    return JSON.parse(data);\n  } catch (error) {\n    // this isn't an event we are waiting for.\n  }\n\n  return object;\n};\n","/**\n * Created by Oleg Galaburda on 09.02.16.\n */\nimport hasOwn from '@actualwave/has-own';\nimport { isObject } from '@actualwave/event-dispatcher';\nimport { toRawData, parseRawData } from './utils';\n\nexport class MessagePortEvent {\n  constructor(event, dispatcherId) {\n    this.event = event;\n    this.dispatcherId = dispatcherId;\n  }\n\n  toJSON() {\n    return {\n      event: toRawData(this.event),\n      dispatcherId: this.dispatcherId,\n    };\n  }\n}\n\nexport const isMessagePortEvent = (object) =>\n  isObject(object) && hasOwn(object, 'dispatcherId') && hasOwn(object, 'event');\n\nexport const parseMessagePortEvent = (object) => {\n  const result = parseRawData(object);\n\n  if (result && isMessagePortEvent(result)) {\n    const { event, dispatcherId } = result;\n    return new MessagePortEvent(parseRawData(event), dispatcherId);\n  }\n\n  return null;\n};\n\nexport default MessagePortEvent;\n","/**\n * Created by Oleg Galaburda on 09.02.16.\n */\n/* eslint-disable no-restricted-globals */\n\nimport { createEventDispatcher, getEvent } from '@actualwave/event-dispatcher';\nimport { MessagePortEvent, parseMessagePortEvent } from './MessagePortEvent';\nimport { createId, toRawData } from './utils';\n\nexport class MessagePortDispatcher {\n  dispatcherId = createId();\n\n  targetOrigin = '*';\n\n  constructor(\n    target = null,\n    customPostMessageHandler = null,\n    receiverEventPreprocessor = null,\n    senderEventPreprocessor = null,\n  ) {\n    this.target = target || self;\n    this.customPostMessageHandler = customPostMessageHandler;\n    this.senderEventPreprocessor = senderEventPreprocessor;\n    this.sender = createEventDispatcher();\n    this.receiver = createEventDispatcher(receiverEventPreprocessor);\n\n    this.target.addEventListener('message', (event) => this._postMessageListener(event));\n  }\n\n  addEventListener(eventType, listener, priority) {\n    this.receiver.addEventListener(eventType, listener, priority);\n  }\n\n  hasEventListener(eventType) {\n    return this.receiver.hasEventListener(eventType);\n  }\n\n  removeEventListener(eventType, listener) {\n    this.receiver.removeEventListener(eventType, listener);\n  }\n\n  removeAllEventListeners(eventType) {\n    this.receiver.removeAllEventListeners(eventType);\n  }\n\n  dispatchEvent(eventType, data, transferList) {\n    let event = getEvent(eventType, data);\n\n    if (this.senderEventPreprocessor) {\n      event = this.senderEventPreprocessor.call(this, event);\n    }\n\n    const eventJson = toRawData(new MessagePortEvent(event, this.dispatcherId));\n\n    return this._postMessageHandler(eventJson, transferList);\n  }\n\n  /**\n   * @private\n   */\n  _postMessageHandler(data, transferList) {\n    const handler = this.customPostMessageHandler;\n\n    if (handler) {\n      return handler.call(this, data, this.targetOrigin, transferList);\n    }\n\n    return this.target.postMessage(data, this.targetOrigin, transferList);\n  }\n\n  /**\n   * @private\n   */\n  _postMessageListener(event) {\n    // INFO .nativeEvent react-native thing, it contains event object coming from WebView\n    event = event.nativeEvent || event;\n    const message = parseMessagePortEvent(event.data);\n\n    if (message) {\n      if (message.dispatcherId === this.dispatcherId) {\n        this.sender.dispatchEvent(message.event);\n      } else {\n        this.receiver.dispatchEvent(message.event);\n      }\n    }\n  }\n}\n\nexport const createMessagePortDispatcher = (\n  target,\n  customPostMessageHandler,\n  receiverEventPreprocessor,\n  senderEventPreprocessor,\n) =>\n  new MessagePortDispatcher(\n    target,\n    customPostMessageHandler,\n    receiverEventPreprocessor,\n    senderEventPreprocessor,\n  );\n\nexport const factory = (getTarget, dispatcher = null) => () => {\n  if (!dispatcher) {\n    dispatcher = createMessagePortDispatcher(getTarget());\n  }\n\n  return dispatcher;\n};\n\nexport const getForSelf = factory(() => self);\n\nexport const getForParent = factory(() => parent);\n\nexport const getForTop = factory(() => top);\n\nexport default MessagePortDispatcher;\n"],"names":["createId","Math","ceil","random","Date","now","toRawData","object","toJSON","JSON","stringify","parseRawData","data","isObject","parse","error","MessagePortEvent","constructor","event","dispatcherId","isMessagePortEvent","hasOwn","parseMessagePortEvent","result","MessagePortDispatcher","target","customPostMessageHandler","receiverEventPreprocessor","senderEventPreprocessor","targetOrigin","self","sender","createEventDispatcher","receiver","addEventListener","_postMessageListener","eventType","listener","priority","hasEventListener","removeEventListener","removeAllEventListeners","dispatchEvent","transferList","getEvent","call","eventJson","_postMessageHandler","handler","postMessage","nativeEvent","message","createMessagePortDispatcher","factory","getTarget","dispatcher","getForSelf","getForParent","parent","getForTop","top"],"mappings":"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"}