{"version":3,"file":"messageport-dispatcher.min.js","sources":["../node_modules/@actualwave/has-own/has-own.js","../node_modules/@actualwave/event-dispatcher/index.js","../source/utils.js","../source/MessagePortEvent.js","../source/MessagePortDispatcher.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst hasOwn = (\n  (has) =>\n  (target, property) =>\n  Boolean(target && has.call(target, property))\n)(Object.prototype.hasOwnProperty);\n\nexports.hasOwn = hasOwn;\nexports.default = hasOwn;","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar hasOwn = _interopDefault(require('@actualwave/has-own'));\n\n/**\n *      \n */\n\n/* eslint-disable import/prefer-default-export */\nconst isObject = value => typeof value === 'object' && value !== null;\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n *      \n */\nclass Event {\n  constructor(type, data = null) {\n    this.type = type;\n    this.data = data;\n    this.defaultPrevented = false;\n  }\n\n  toJSON() {\n    return {\n      type: this.type,\n      data: this.data\n    };\n  }\n\n  isDefaultPrevented() {\n    return this.defaultPrevented;\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n}\nconst getEvent = (eventOrType, optionalData) => {\n  let event = eventOrType;\n\n  if (!isObject(eventOrType)) {\n    event = new Event(String(eventOrType), optionalData);\n  }\n\n  return event;\n};\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n *      \n */\nclass ListenersRunner {\n  constructor(listeners, onStopped, onComplete) {\n    this.index = -1;\n    this.immediatelyStopped = false;\n\n    this.stopImmediatePropagation = () => {\n      this.immediatelyStopped = true;\n    };\n\n    this.listeners = listeners;\n    this.onStopped = onStopped;\n    this.onComplete = onComplete;\n  }\n\n  run(event, target) {\n    let listener;\n    const {\n      listeners\n    } = this;\n    this.augmentEvent(event); // TODO this has to be handled in separate object ListenersRunner that should be\n    // created for each call() call and asked for index validation on each listener remove.\n\n    for (this.index = 0; this.index < listeners.length; this.index++) {\n      if (this.immediatelyStopped) break;\n      listener = listeners[this.index];\n      listener.call(target, event);\n    }\n\n    this.clearEvent(event);\n    this.onComplete(this);\n  }\n\n  augmentEvent(eventObject) {\n    const event = eventObject;\n    event.stopPropagation = this.onStopped;\n    event.stopImmediatePropagation = this.stopImmediatePropagation;\n  }\n  /* eslint class-methods-use-this: \"off\" */\n\n\n  clearEvent(eventObject) {\n    const event = eventObject;\n    delete event.stopPropagation;\n    delete event.stopImmediatePropagation;\n  }\n\n  listenerRemoved(listeners, index) {\n    if (listeners === this.listeners && index <= this.index) {\n      this.index--;\n    }\n  }\n\n}\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n *      \n */\nclass EventListeners {\n  constructor() {\n    this._listeners = {};\n    this._runners = [];\n\n    this.removeRunner = runner => {\n      this._runners.splice(this._runners.indexOf(runner), 1);\n    };\n  }\n\n  createList(eventType, priorityOpt) {\n    const priority = parseInt(priorityOpt, 10);\n    const target = this.getPrioritiesByKey(eventType);\n    const key = String(priority);\n    let value;\n\n    if (hasOwn(target, key)) {\n      value = target[key];\n    } else {\n      value = [];\n      target[key] = value;\n    }\n\n    return value;\n  }\n\n  getPrioritiesByKey(key) {\n    let value;\n\n    if (hasOwn(this._listeners, key)) {\n      value = this._listeners[key];\n    } else {\n      value = {};\n      this._listeners[key] = value;\n    }\n\n    return value;\n  }\n\n  add(eventType, handler, priority) {\n    const handlers = this.createList(eventType, priority);\n\n    if (handlers.indexOf(handler) < 0) {\n      handlers.push(handler);\n    }\n  }\n\n  has(eventType) {\n    let priority;\n    let result = false;\n    const priorities = this.getPrioritiesByKey(eventType);\n\n    if (priorities) {\n      for (priority in priorities) {\n        if (hasOwn(priorities, priority)) {\n          result = true;\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  remove(eventType, handler) {\n    const priorities = this.getPrioritiesByKey(eventType);\n\n    if (priorities) {\n      const list = Object.getOwnPropertyNames(priorities);\n      const {\n        length\n      } = list;\n\n      for (let index = 0; index < length; index++) {\n        const priority = list[index];\n        const handlers = priorities[priority];\n        const handlerIndex = handlers.indexOf(handler);\n\n        if (handlerIndex >= 0) {\n          handlers.splice(handlerIndex, 1);\n\n          if (!handlers.length) {\n            delete priorities[priority];\n          }\n\n          this._runners.forEach(runner => {\n            runner.listenerRemoved(handlers, handlerIndex);\n          });\n        }\n      }\n    }\n  }\n\n  removeAll(eventType) {\n    delete this._listeners[eventType];\n  }\n\n  createRunner(handlers, onStopped) {\n    const runner = new ListenersRunner(handlers, onStopped, this.removeRunner);\n\n    this._runners.push(runner);\n\n    return runner;\n  }\n\n  call(event, target) {\n    const priorities = this.getPrioritiesByKey(event.type);\n    let stopped = false;\n\n    const stopPropagation = () => {\n      stopped = true;\n    };\n\n    if (priorities) {\n      // getOwnPropertyNames() or keys()?\n      const list = Object.getOwnPropertyNames(priorities).sort((a, b) => a - b);\n      const {\n        length\n      } = list;\n\n      for (let index = 0; index < length; index++) {\n        if (stopped) break;\n        const handlers = priorities[list[index]]; // in case if all handlers of priority were removed while event\n        // was dispatched and handlers become undefined.\n\n        if (handlers) {\n          const runner = this.createRunner(handlers, stopPropagation);\n          runner.run(event, target);\n          if (runner.immediatelyStopped) break;\n        }\n      }\n    }\n  }\n\n}\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n *      \n */\n\nclass EventDispatcher {\n  constructor(eventPreprocessor = null) {\n    this._eventPreprocessor = eventPreprocessor;\n    this._listeners = new EventListeners();\n  }\n\n  addEventListener(eventType, listener, priority = 0) {\n    this._listeners.add(eventType, listener, -priority || 0);\n  }\n\n  hasEventListener(eventType) {\n    return this._listeners.has(eventType);\n  }\n\n  removeEventListener(eventType, listener) {\n    this._listeners.remove(eventType, listener);\n  }\n\n  removeAllEventListeners(eventType) {\n    this._listeners.removeAll(eventType);\n  }\n\n  dispatchEvent(event, data) {\n    let eventObject = getEvent(event, data);\n\n    if (this._eventPreprocessor) {\n      eventObject = this._eventPreprocessor.call(this, eventObject);\n    }\n\n    this._listeners.call(eventObject);\n  }\n\n}\n\nconst createEventDispatcher = eventPreprocessor => new EventDispatcher(eventPreprocessor);\n\nexports.default = EventDispatcher;\nexports.Event = Event;\nexports.EventDispatcher = EventDispatcher;\nexports.createEventDispatcher = createEventDispatcher;\nexports.getEvent = getEvent;\nexports.isObject = isObject;\n//# sourceMappingURL=index.js.map\n","/**\r\n * Created by Oleg Galaburda on 09.02.16.\r\n */\r\nimport { isObject } from '@actualwave/event-dispatcher';\r\n\r\nexport const createId = () => `MP/${Math.ceil(Math.random() * 10000)}/${Date.now()}`;\r\n\r\n/**\r\n * If toJSON method implemented on object, it will be called instead of converting to JSON string.\r\n * This was made to utilize structured cloning algorithm for raw objects.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\r\n * In this case developer is responsible for converting linked objects.\r\n * @param object\r\n * @returns {Object}\r\n */\r\nexport const toRawData = (object) => {\r\n  if (typeof object.toJSON === 'function') {\r\n    return object.toJSON();\r\n  }\r\n\r\n  return JSON.stringify(object);\r\n};\r\n\r\n/**\r\n *\r\n * @param data {Object|String}\r\n * @returns {Object}\r\n */\r\nexport const parseRawData = (data) => {\r\n  let object; // keep it undefined in case of error\r\n\r\n  if (isObject(data)) {\r\n    return data;\r\n  }\r\n\r\n  try {\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    // this isn't an event we are waiting for.\r\n  }\r\n\r\n  return object;\r\n};\r\n","/**\r\n * Created by Oleg Galaburda on 09.02.16.\r\n */\r\nimport hasOwn from '@actualwave/has-own';\r\nimport { isObject } from '@actualwave/event-dispatcher';\r\nimport { toRawData, parseRawData } from './utils';\r\n\r\nexport class MessagePortEvent {\r\n  constructor(event, dispatcherId) {\r\n    this.event = event;\r\n    this.dispatcherId = dispatcherId;\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      event: toRawData(this.event),\r\n      dispatcherId: this.dispatcherId,\r\n    };\r\n  }\r\n}\r\n\r\nexport const isMessagePortEvent = (object) =>\r\n  isObject(object) && hasOwn(object, 'dispatcherId') && hasOwn(object, 'event');\r\n\r\nexport const parseMessagePortEvent = (object) => {\r\n  const result = parseRawData(object);\r\n\r\n  if (result && isMessagePortEvent(result)) {\r\n    const { event, dispatcherId } = result;\r\n    return new MessagePortEvent(parseRawData(event), dispatcherId);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default MessagePortEvent;\r\n","/**\r\n * Created by Oleg Galaburda on 09.02.16.\r\n */\r\n/* eslint-disable no-restricted-globals */\r\n\r\nimport { createEventDispatcher, getEvent } from '@actualwave/event-dispatcher';\r\nimport { MessagePortEvent, parseMessagePortEvent } from './MessagePortEvent';\r\nimport { createId, toRawData } from './utils';\r\n\r\nexport class MessagePortDispatcher {\r\n  dispatcherId = createId();\r\n\r\n  targetOrigin = '*';\r\n\r\n  constructor(\r\n    target = null,\r\n    customPostMessageHandler = null,\r\n    receiverEventPreprocessor = null,\r\n    senderEventPreprocessor = null,\r\n  ) {\r\n    this.target = target || self;\r\n    this.customPostMessageHandler = customPostMessageHandler;\r\n    this.senderEventPreprocessor = senderEventPreprocessor;\r\n    this.sender = createEventDispatcher();\r\n    this.receiver = createEventDispatcher(receiverEventPreprocessor);\r\n\r\n    target.addEventListener('message', (event) => this._postMessageListener(event));\r\n  }\r\n\r\n  addEventListener(eventType, listener, priority) {\r\n    this.receiver.addEventListener(eventType, listener, priority);\r\n  }\r\n\r\n  hasEventListener(eventType) {\r\n    return this.receiver.hasEventListener(eventType);\r\n  }\r\n\r\n  removeEventListener(eventType, listener) {\r\n    this.receiver.removeEventListener(eventType, listener);\r\n  }\r\n\r\n  removeAllEventListeners(eventType) {\r\n    this.receiver.removeAllEventListeners(eventType);\r\n  }\r\n\r\n  dispatchEvent(eventType, data, transferList) {\r\n    let event = getEvent(eventType, data);\r\n\r\n    if (this.senderEventPreprocessor) {\r\n      event = this.senderEventPreprocessor.call(this, event);\r\n    }\r\n\r\n    const eventJson = toRawData(new MessagePortEvent(event, this.dispatcherId));\r\n\r\n    return this._postMessageHandler(eventJson, transferList);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _postMessageHandler(data, transferList) {\r\n    const handler = this.customPostMessageHandler;\r\n\r\n    if (handler) {\r\n      return handler.call(this, data, this.targetOrigin, transferList);\r\n    }\r\n\r\n    return this.target.postMessage(data, this.targetOrigin, transferList);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _postMessageListener(event) {\r\n    // INFO .nativeEvent react-native thing, it contains event object coming from WebView\r\n    event = event.nativeEvent || event;\r\n    const message = parseMessagePortEvent(event.data);\r\n\r\n    if (message) {\r\n      if (message.dispatcherId === this.dispatcherId) {\r\n        this.sender.dispatchEvent(message.event);\r\n      } else {\r\n        this.receiver.dispatchEvent(message.event);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const createMessagePortDispatcher = (\r\n  target,\r\n  customPostMessageHandler,\r\n  receiverEventPreprocessor,\r\n  senderEventPreprocessor,\r\n) =>\r\n  new MessagePortDispatcher(\r\n    target,\r\n    customPostMessageHandler,\r\n    receiverEventPreprocessor,\r\n    senderEventPreprocessor,\r\n  );\r\n\r\nexport const factory = (getTarget, dispatcher = null) => () => {\r\n  if (!dispatcher) {\r\n    return createMessagePortDispatcher(getTarget());\r\n  }\r\n  return dispatcher;\r\n};\r\n\r\nexport const createForSelf = factory(() => self);\r\n\r\nexport const createForParent = factory(() => parent);\r\n\r\nexport const createForTop = factory(() => top);\r\n\r\nexport default MessagePortDispatcher;\r\n"],"names":["Object","defineProperty","exports","value","hasOwn","has","target","property","Boolean","call","prototype","hasOwnProperty","ex","require$$0","isObject","Event","[object Object]","type","data","this","defaultPrevented","getEvent","eventOrType","optionalData","event","String","ListenersRunner","listeners","onStopped","onComplete","index","immediatelyStopped","stopImmediatePropagation","listener","augmentEvent","length","clearEvent","eventObject","stopPropagation","EventListeners","_listeners","_runners","removeRunner","runner","splice","indexOf","eventType","priorityOpt","priority","parseInt","getPrioritiesByKey","key","handler","handlers","createList","push","result","priorities","list","getOwnPropertyNames","handlerIndex","forEach","listenerRemoved","stopped","sort","a","b","createRunner","run","EventDispatcher","eventPreprocessor","_eventPreprocessor","add","remove","removeAll","createId","Math","ceil","random","Date","now","toRawData","object","toJSON","JSON","stringify","parseRawData","parse","error","MessagePortEvent","constructor","dispatcherId","parseMessagePortEvent","isMessagePortEvent","MessagePortDispatcher","customPostMessageHandler","receiverEventPreprocessor","senderEventPreprocessor","targetOrigin","self","sender","createEventDispatcher","receiver","addEventListener","_postMessageListener","hasEventListener","removeEventListener","removeAllEventListeners","dispatchEvent","transferList","eventJson","_postMessageHandler","postMessage","nativeEvent","message","createMessagePortDispatcher","factory","getTarget","dispatcher","createForSelf","createForParent","parent","createForTop","top"],"mappings":"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"}